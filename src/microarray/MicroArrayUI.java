/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2011 Armin Töpfer (xlrname@gmail.com),
 * All rights reserved.
 *
 * The contents of this file are subject to the terms of the Common
 * Development and Distribution License("CDDL") (the "License"). You
 * may not use this file except in compliance with the License. You can
 * obtain a copy of the License at http://www.sun.com/cddl/cddl.html
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.  When distributing the software, include
 * this License Header Notice in each file.  If applicable, add the following
 * below the License Header, with the fields enclosed by brackets [] replaced
 *  by your own identifying information:
 *
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * Contributor(s):
 */
package microarray;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Armin Töpfer (xlrname@gmail.com)
 */
public class MicroArrayUI extends javax.swing.JFrame {

    private MicroArray ma_current;

    class FooTableModel extends DefaultTableModel {

        public FooTableModel(Object[][] rowData, Object[] headers) {
            super(rowData, headers);
        }

        public void sortByColumn(final int clm) {
            Collections.sort(this.dataVector, new Comparator() {

                public int compare(Object o1, Object o2) {
                    Vector v1 = (Vector) o1;
                    Vector v2 = (Vector) o2;

                    int size1 = v1.size();
                    if (clm >= size1) {
                        throw new IllegalArgumentException("max column idx: "
                                + size1);
                    }

                    String s1 = String.valueOf(v1.get(clm));
                    String s2 = String.valueOf(v2.get(clm));

                    return s1.compareTo(s2);
                }
            });
        }
    }

    /** Creates new form MicroArrayUI */
    public MicroArrayUI() {
        initComponents();
        this.setTitle("Simple Micro Arrays Processing");
        clustertable.setUI(new DragDropRowTableUI());

        jTable1.getTableHeader().addMouseListener(new MouseAdapter() {

            public void mousePressed(MouseEvent evt) {
                ((FooTableModel) jTable1.getModel()).sortByColumn(jTable1.columnAtPoint(evt.getPoint()));
            }
        });

        this.jList1.addListSelectionListener(new ListSelectionListener() {

            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    JList list = JList.class.cast(e.getSource());
                    File f = fileMap.get(String.class.cast(list.getSelectedValue()));
                    MicroArray ma = new MicroArray(f);
                    ma_current = ma;
                    jTable1.setModel(new FooTableModel(
                            ma.toObjectArray(),
                            new String[]{
                                "Gene name", "Coef mean", "Coef sd", "A mean", "A sd", "# spots", "Function"
                            }) {

                        Class[] types = new Class[]{
                            java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class
                        };
                        boolean[] canEdit = new boolean[]{
                            false, false, false, false, false, false
                        };

                        public Class getColumnClass(int columnIndex) {
                            return types[columnIndex];
                        }

                        public boolean isCellEditable(int rowIndex, int columnIndex) {
                            return canEdit[columnIndex];
                        }
                    });
                }
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        clustertable = new javax.swing.JTable();
        exporter = new javax.swing.JButton();
        ss = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Select topTables");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Gene name", "Coef mean", "Coef sd", "A mean", "A sd", "Function"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setColumnSelectionAllowed(true);
        jScrollPane2.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        jTable1.getColumnModel().getColumn(0).setPreferredWidth(50);
        jTable1.getColumnModel().getColumn(1).setPreferredWidth(50);
        jTable1.getColumnModel().getColumn(2).setPreferredWidth(50);
        jTable1.getColumnModel().getColumn(3).setPreferredWidth(50);
        jTable1.getColumnModel().getColumn(4).setResizable(false);
        jTable1.getColumnModel().getColumn(4).setPreferredWidth(50);
        jTable1.getColumnModel().getColumn(5).setPreferredWidth(300);

        jButton2.setText("Export selection");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, 0, 0, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 846, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)))
                .addContainerGap())
        );

        jTabbedPane1.addTab("After limma", jPanel1);

        jButton3.setText("Load files");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        clustertable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "File name", "Experiment", "CSW"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        clustertable.setEnabled(false);
        jScrollPane3.setViewportView(clustertable);

        exporter.setText("Export");
        exporter.setEnabled(false);
        exporter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exporterActionPerformed(evt);
            }
        });

        ss.setText("Save schema");
        ss.setEnabled(false);
        ss.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ssActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1013, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ss)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 641, Short.MAX_VALUE)
                        .addComponent(exporter, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(ss)
                    .addComponent(exporter))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Before clustering", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1038, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setMultiSelectionEnabled(true);
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            this.fileMap.clear();
            DefaultListModel model = new DefaultListModel();
            for (File f : chooser.getSelectedFiles()) {
                model.addElement(f.getName());
                this.fileMap.put(f.getName(), f);
            }
            this.jList1.setModel(model);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
    }//GEN-LAST:event_jList1ValueChanged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        JFileChooser jfc = new JFileChooser();
        jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        if (jfc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            FileWriter outFile = null;
            try {
                outFile = new FileWriter(jfc.getSelectedFile());
                PrintWriter out = new PrintWriter(outFile);
                for (Object[] o : ma_current.toObjectArray()) {
                    StringBuilder sb = new StringBuilder();
                    for (Object p : o) {
                        if (p != null) {
                            sb.append(p.toString());
                        }
                        sb.append("\t");
                    }
                    sb.setCharAt(sb.length() - 1, '\\');
                    sb.append("\\");
                    out.println(sb.toString());
                }
            } catch (IOException ex) {
                Logger.getLogger(MicroArrayUI.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    outFile.close();
                } catch (IOException ex) {
                    Logger.getLogger(MicroArrayUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

    }//GEN-LAST:event_jButton2ActionPerformed
    private Map<String, File> clusterMap = new HashMap<String, File>();
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setMultiSelectionEnabled(true);
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            clusterMap.clear();
            for (File f : chooser.getSelectedFiles()) {
                clusterMap.put(f.getName(), f);
            }
        }
        List<Object[]> tableContent = new LinkedList<Object[]>();
//        Object[][] tableContent = new Object[clusterMap.size()][3];
        for (String s : clusterMap.keySet()) {
            //check content if schema
            boolean schema = false;
            try {
                FileInputStream fstream = new FileInputStream(this.clusterMap.get(s));
                DataInputStream in = new DataInputStream(fstream);
                BufferedReader br = new BufferedReader(new InputStreamReader(in));
                String strLine;
                boolean firstline = true;
                while ((strLine = br.readLine()) != null) {
                    if (firstline) {
                        schema = strLine.equals("clusterfile");
                        firstline ^= true;
                        continue;
                    }
                    if (!schema) {
                        break;
                    }
                    String[] split = strLine.split(";");
                    
                    
                    Object[] tc = new Object[3];
                    tc[0] = split[0];
                    tc[1] = split[1];
                    tc[2] = Boolean.parseBoolean(split[2]);
                    tableContent.add(tc);
                    this.clusterMap.put(split[0], new File(split[3]));
                }
                in.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
            if (!schema) {
                Object[] tc = new Object[3];
                tc[0] = s;
                tc[1] = s;
                tc[2] = s.contains("CSW") || s.contains("csw");
                tableContent.add(tc);
            }
        }
        Object[][] tableContent_array = new Object[tableContent.size()][3];
        for (int i = 0; i < tableContent.size(); i++) {
            tableContent_array[i] = tableContent.get(i);
        }
        clustertable.setModel(new FooTableModel(
                tableContent_array,
                new String[]{
                    "File name", "Experiment", "CSW"
                }) {

            Class[] types = new Class[]{
                java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean[]{
                false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        ss.setEnabled(true);
        exporter.setEnabled(true);
        clustertable.setEnabled(true);
    }//GEN-LAST:event_jButton3ActionPerformed
    
    private Map<String, List<File>> clusterDataMap = new HashMap<String, List<File>>();
    private void exporterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exporterActionPerformed
        this.clusterDataMap.clear();
        List<String> experiments = new LinkedList<String>();
        Map<String, Boolean> filenameToCSW = new HashMap<String, Boolean>();
        for (int i = 0; i < this.clustertable.getModel().getRowCount(); i++) {
            String experiment = (String) this.clustertable.getModel().getValueAt(i, 1);
            if (!this.clusterDataMap.containsKey(experiment)) {
                this.clusterDataMap.put(experiment, new LinkedList<File>());
            }
            List<File> l = this.clusterDataMap.get(experiment);
            l.add(this.clusterMap.get(this.clustertable.getModel().getValueAt(i, 0)));
            Boolean csw = (Boolean) this.clustertable.getModel().getValueAt(i, 2);
            filenameToCSW.put((String) this.clustertable.getModel().getValueAt(i, 0), csw);
            if (!experiments.contains(experiment)) {
                experiments.add(experiment);
            }
        }

        JFileChooser jfc = new JFileChooser();
        jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        if (jfc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            FileWriter outFile = null;
            try {
                outFile = new FileWriter(jfc.getSelectedFile());
                PrintWriter out = new PrintWriter(outFile);
                out.write(new Clusterer(clusterDataMap, experiments, filenameToCSW).getClusters());
            } catch (IOException ex) {
                Logger.getLogger(MicroArrayUI.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    outFile.close();
                } catch (IOException ex) {
                    Logger.getLogger(MicroArrayUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_exporterActionPerformed

    private void ssActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ssActionPerformed
        StringBuilder sb = new StringBuilder();
        sb.append("clusterfile\n");
        for (int i = 0; i < this.clustertable.getModel().getRowCount(); i++) {
            String name = (String) this.clustertable.getModel().getValueAt(i, 0);
            String experiment = (String) this.clustertable.getModel().getValueAt(i, 1);
            Boolean csw = (Boolean) this.clustertable.getModel().getValueAt(i, 2);
            String path = this.clusterMap.get(name).getAbsolutePath();
            sb.append(name).append(";").append(experiment).append(";").append(csw).append(";").append(path).append("\n");
        }
        JFileChooser jfc = new JFileChooser();
        jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        if (jfc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            FileWriter outFile = null;
            try {
                outFile = new FileWriter(jfc.getSelectedFile());
                PrintWriter out = new PrintWriter(outFile);
                out.write(sb.toString());
            } catch (IOException ex) {
                Logger.getLogger(MicroArrayUI.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    outFile.close();
                } catch (IOException ex) {
                    Logger.getLogger(MicroArrayUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_ssActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new MicroArrayUI().setVisible(true);
            }
        });
    }
    private Map<String, File> fileMap = new HashMap<String, File>();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable clustertable;
    private javax.swing.JButton exporter;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton ss;
    // End of variables declaration//GEN-END:variables
}
